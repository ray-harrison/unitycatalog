# Unity Catalog Server Configuration Template
# Copy this file to server.properties.local and configure with your actual values

server.env=dev

## Identity Provider authorization parameters
# Enable authorization and configure your Azure AD or other OAuth provider
server.authorization=enable
server.authorization-url=https://login.microsoftonline.com/YOUR_TENANT_ID/oauth2/v2.0/authorize
server.token-url=https://login.microsoftonline.com/YOUR_TENANT_ID/oauth2/v2.0/token
server.client-id=YOUR_CLIENT_ID
server.client-secret=YOUR_CLIENT_SECRET
server.jwt.issuer=https://login.microsoftonline.com/YOUR_TENANT_ID/v2.0
server.jwt.audience=YOUR_AUDIENCE_ID

# Define the model storage root. Cloud storage or file based allowed.
# If no root specified, the current working directory of the server is used.
storage-root.models=file:/tmp/ucroot

# Example cloud storage configurations (uncomment and configure as needed):
#storage-root.models=s3://your-s3-bucket/root
#storage-root.models=abfs://file_system@account_name.dfs.core.windows.net/root
#storage-root.models=gs://your-gc-bucket/root

## S3 Storage Config (Multiple configs can be added by incrementing the index)
# Configure your S3 settings:
#s3.bucketPath.0=s3://your-bucket-name
#s3.region.0=us-east-1
#s3.awsRoleArn.0=arn:aws:iam::YOUR_ACCOUNT:role/your-role-name
# Optional (If blank, it will use DefaultCredentialsProviderChain)
#s3.accessKey.0=YOUR_ACCESS_KEY
#s3.secretKey.0=YOUR_SECRET_KEY
# Test Only (If you provide a session token, it will just use those session creds, no downscoping)
#s3.sessionToken.0=
# Optional: Custom S3 endpoint for S3-compatible services (MinIO, Ceph, etc.)
#s3.endpoint.0=https://your-s3-endpoint.com
# Optional: Custom STS endpoint for S3-compatible services
#s3.stsEndpoint.0=https://your-sts-endpoint.com
# Optional: Use path-style access (default: false, set to true for MinIO)
#s3.pathStyleAccess.0=true
# Optional: Enable/disable SSL for S3 endpoint (default: true)
#s3.sslEnabled.0=true

## ADLS Storage Config (Multiple configs can be added by incrementing the index)
#adls.storageAccountName.0=your_storage_account
#adls.tenantId.0=YOUR_TENANT_ID
#adls.clientId.0=YOUR_CLIENT_ID
#adls.clientSecret.0=YOUR_CLIENT_SECRET

## GCS Storage Config (Multiple configs can be added by incrementing the index)
#gcs.bucketPath.0=your-gcs-bucket
# Optional (If blank, it will use Default Application chain to find credentials)
#gcs.jsonKeyFilePath.0=/path/to/your/service-account.json

# Database Configuration (H2 persistent for dev environment)
server.database.url=jdbc:h2:file:./etc/db/h2db;AUTO_SERVER=TRUE;DB_CLOSE_ON_EXIT=FALSE
server.database.driver=org.h2.Driver
server.database.username=sa
server.database.password=

# Logging Configuration
logging.level=INFO


# Bootstrap Configuration
# Enable Azure AD bootstrap functionality
server.bootstrap.enabled=false
server.bootstrap.window-minutes=30
server.bootstrap.initial-owner-upn=YOUR_EMAIL@YOUR_DOMAIN.com

# Azure AD Bootstrap Configuration
server.azure-ad.tenant-id=YOUR_AZURE_TENANT_ID
server.azure-ad.client-id=YOUR_AZURE_CLIENT_ID