server.env=dev
## Identity Provider authorization parameters
# examples:
# authorization=enable
# authorization-url=https://accounts.google.com/o/oauth2/auth
# token-url=https://oauth2.googleapis.com/token
# client-id=111122223333-abab1212cdcd3434.apps.googleusercontent.com
# client-secret=GOCSPX-ababfoobarcdcd-5q
# Enable bootstrap functionality
bootstrap.enabled=true
bootstrap.windowMinutes=10

# Azure AD configuration (replace with your values)
server.authorization=enable
server.authorization-url=https://login.microsoftonline.com/YOUR-TENANT-ID/oauth2/v2.0/authorize
server.token-url=https://login.microsoftonline.com/YOUR-TENANT-ID/oauth2/v2.0/token
server.client-id=YOUR-CLIENT-ID
server.client-secret=YOUR-CLIENT-SECRET
azure.tenant.id=YOUR-TENANT-ID
azure.client.id=YOUR-CLIENT-ID

# Initial owner for testing
bootstrap.initialOwner.upn=your-email@domain.com

# Keep legacy admin enabled during testing
bootstrap.disableLegacyLocalAdmin=false

# Enable debug logging
server.log-level=DEBUG


## Bootstrap Configuration
# Azure AD bootstrap settings for initial OWNER setup
bootstrap.windowMinutes=30
bootstrap.initialOwner.upn=
bootstrap.disableLegacyLocalAdmin=false

# Define the model storage root.  Cloud storage or file based allowed.
# If no root specified, the current working directory of the server is used.

#storage-root.models=s3://my-s3-bucket/root
#storage-root.models=abfs://file_system@account_name.dfs.core.windows.net/root
#storage-root.models=gs://my-gc-bucket/root
storage-root.models=file:/tmp/ucroot

## S3 Storage Config (Multiple configs can be added by incrementing the index)
s3.bucketPath.0=s3://your-bucket-name/path
s3.region.0=us-east-1
s3.awsRoleArn.0=arn:aws:iam::123456789012:role/your-role-name
# Optional (If blank, it will use DefaultCredentialsProviderChain)
s3.accessKey.0=your-access-key
s3.secretKey.0=your-secret-key
# Test Only (If you provide a session token, it will just use those session creds, no downscoping)
s3.sessionToken.0=
# Optional: Custom S3 endpoint for S3-compatible services (MinIO, Ceph, etc.)
s3.endpoint.0=https://your-s3-endpoint.com
# Optional: Custom STS endpoint for S3-compatible services
s3.stsEndpoint.0=https://your-sts-endpoint.com
# Optional: Use path-style access (default: false, set to true for MinIO)
s3.pathStyleAccess.0=true
# Optional: Enable/disable SSL for S3 endpoint (default: true)
s3.sslEnabled.0=true

## ADLS Storage Config (Multiple configs can be added by incrementing the index)
adls.storageAccountName.0=
adls.tenantId.0=
adls.clientId.0=
adls.clientSecret.0=

## GCS Storage Config (Multiple configs can be added by incrementing the index)
gcs.bucketPath.0=
# Optional (If blank, it will use Default Application chain to find credentials)
gcs.jsonKeyFilePath.0=