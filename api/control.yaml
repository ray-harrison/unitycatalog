openapi: 3.0.0
servers:
  - url: http://localhost:8080/api/2.1/unity-catalog
    description: Localhost reference server
tags:
  - name: Users
    description: |
      A user is the identity recognized by Unity Catalog.
  - name: Admins
    description: |
      Administrative operations for Unity Catalog setup and bootstrapping.

paths:
  /admins/bootstrap-owner:
    post:
      tags:
        - Admins
      operationId: bootstrapOwner
      summary: Bootstrap Azure principal as OWNER
      description: |
        **PREVIEW FEATURE**: Bootstrap an Azure AD principal as OWNER of the Unity Catalog instance.
        This endpoint creates the initial administrative user with full OWNER privileges when
        no OWNER exists. Can only be called once successfully per catalog instance.
        
        Required JWT claims:
        - `oid`: Azure AD object ID
        - `preferred_username` or `upn`: User principal name
        - `name`: Display name
      x-uc-stage: public_preview
      x-uc-since: 0.3.0
      security:
        - azureJwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BootstrapOwnerRequest'
      responses:
        '200':
          description: OWNER successfully bootstrapped
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BootstrapOwnerResponse'
        '409':
          description: Conflict - OWNER already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admins/bootstrap-status:
    get:
      tags:
        - Admins
      operationId: getBootstrapStatus
      summary: Get bootstrap status and configuration
      description: |
        **PREVIEW FEATURE**: Returns current bootstrap configuration and admin state.
        Available to Azure-authenticated principals during bootstrap operations.
      x-uc-stage: public_preview
      x-uc-since: 0.3.0
      security:
        - azureJwt: []
      responses:
        '200':
          description: Bootstrap status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BootstrapStatus'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '500':
          $ref: '#/components/responses/InternalError'

  /admins/claim-admin:
    post:
      tags:
        - Admins
      operationId: claimAdmin
      summary: Claim admin privileges for authenticated principal
      description: |
        **PREVIEW FEATURE**: Allows Azure-authenticated principal to claim OWNER privileges
        when no Azure admin exists and bootstrap is enabled. This is the preferred method
        for UI-based admin claiming.
      x-uc-stage: public_preview
      x-uc-since: 0.3.0
      security:
        - azureJwt: []
      responses:
        '200':
          description: Admin privileges claimed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimAdminResponse'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '409':
          $ref: '#/components/responses/ResourceConflict'
        '500':
          $ref: '#/components/responses/InternalError'
  /scim2/Users:
    post:
      tags:
        - Users
      operationId: createUser
      summary: Create a user
      description: |
        Creates a new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResource'
      responses:
        '200':
          description: The new user was successfully created.
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResource'
    get:
      tags:
        - Users
      parameters:
        - name: filter
          in: query
          description: Query by which the results have to be filtered.
          schema:
            type: string
          required: false
        - name: startIndex
          in: query
          description: Specifies the index of the first result. First item is number 1.
          schema:
            type: integer
            format: int32
          required: false
        - name: count
          in: query
          description: Desired number of results per page. If no count is provided, it defaults to 50.
          schema:
            type: integer
            format: int32
          required: false
      operationId: listUsers
      summary: List users
      description: |
        Gets details for all the users.
      responses:
        '200':
          description: The user list was successfully retrieved.
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResourceList'
  /scim2/Users/{id}:
    parameters:
      - name: id
        in: path
        description: The id of the user.
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      operationId: getUser
      summary: Get a user
      description: |
        Gets the specified user.
      responses:
        '200':
          description: The user was successfully retrieved.
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResource'
    put:
      tags:
        - Users
      operationId: updateUser
      summary: Update a user
      description: |
        Updates the user that matches the supplied id.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResource'
      responses:
        '200':
          description: The user was successfully updated.
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResource'
    delete:
      tags:
        - Users
      operationId: deleteUser
      summary: Delete a user
      description: |
        Deletes the user that matches the supplied id.
      responses:
        '200':
          description: The user was successfully deleted.
          content:
            application/scim+json:
              schema: {}
  /scim2/Me:
    get:
      tags:
        - Users
      operationId: getSelf
      summary: Get the current user
      description: |
        Gets the user from the jwt token provided.
      responses:
        '200':
          description: The user was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
  /auth/tokens:
    post:
      tags:
        - OAuth2
      parameters:
        - in: query
          name: ext
          description: Specifies whether the server will store a token in the user agent's cookie.
          schema:
            $ref: '#/components/schemas/TokenEndpointExtensionType'
          required: false
      operationId: getToken
      summary: Get a token using an OAuth2 flow
      description: |
        Exchanges credentials for a token using the OAuth2 token exchange.
      # NOTE:
      # When specifying `application/x-www-form-urlencoded` as the content type in the OpenAPI schema,
      # the OpenAPI Generator does not generate request models from the schema.
      # Additionally, accessing parameters directly from the body without a model causes issues with
      # Armeria, particularly when the `ext` query parameter is present.
      #
      # To address this, the same request model is defined here and in `components/schemas/OAuthTokenExchangeForm`.
      # These two definitions MUST be identical.
      # The generated model from `components/schemas/OAuthTokenExchangeForm` will be used
      # in both the `controlApi` and `cli` projects.
      #
      # SEE:
      # - https://armeria.dev/docs/server-annotated-service/#getting-a-query-parameter
      # - https://armeria.dev/docs/server-annotated-service/#injecting-a-parameter-as-an-enum-type
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              description: |
                OAuth2 token exchange request form.
                See https://datatracker.ietf.org/doc/html/rfc8693
              type: object
              required:
                - grant_type
                - subject_token
                - subject_token_type
              properties:
                grant_type:
                  $ref: "#/components/schemas/GrantType"
                scope:
                  description: The authorization scope for the token exchange request.
                  type: string
                requested_token_type:
                  $ref: '#/components/schemas/TokenType'
                subject_token:
                  description: The security token that represents the identity of the party on behalf of whom the request is being made.
                  type: string
                subject_token_type:
                  $ref: '#/components/schemas/TokenType'
                actor_token:
                  description: The security token that represents the identity of the acting party.
                  type: string
                actor_token_type:
                  $ref: '#/components/schemas/TokenType'
      responses:
        '200':
          description: The token exchange was successfully granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenExchangeInfo'
  /auth/logout:
    post:
      tags:
        - OAuth2
      operationId: logout
      summary: Revoke access token cookie
      description: |
        Revokes the access token cookie.
      # NOTE:
      # OAS 3.0 allows empty request bodies. In other words:
      #```
      #  requestBody:
      #    content:
      #      application/json: {}
      #```
      # should be permissible. However, due to the limitations of the OpenAPI Generator, which only
      # accepts OAS 2-style notation, this is a workaround.
      # SEE:
      # - https://github.com/OpenAPITools/openapi-generator/blob/v5.1.0/docs/generators/java.md#parameter-feature
      requestBody:
        content:
          application/json:
            schema:
              type: object
              nullable: true
      responses:
        '200':
          description: The access token will be revoked.
  /auth/bootstrap/token-exchange:
    post:
      tags:
        - OAuth2
      operationId: bootstrapTokenExchange
      summary: Get a token during bootstrap with user creation
      description: |
        **BOOTSTRAP FEATURE**: Exchange Azure AD JWT for Unity Catalog access token during bootstrap window.
        This endpoint validates Azure JWT, creates users if they don't exist, and returns a Unity Catalog
        access token. Only works during the bootstrap window when bootstrap is enabled.
        
        Required JWT claims:
        - `oid`: Azure AD object ID
        - `preferred_username` or `upn`: User principal name
        - `name`: Display name
      x-uc-stage: public_preview
      x-uc-since: 0.3.0
      security:
        - azureJwt: []
      responses:
        '200':
          description: Token exchange successful with user creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenExchangeInfo'
        '400':
          description: Bad request - missing or invalid Azure JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - bootstrap window closed or not enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error during token creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/azure-login/start:
    post:
      tags:
        - OAuth2
      operationId: startAzureLogin
      summary: Start Azure AD OAuth2 login flow
      description: |
        **BOOTSTRAP FEATURE**: Initiate Azure AD OAuth2 login flow for users not yet in Unity Catalog.
        Returns an authorization URL and session ID for completing the login process.
        This is the API equivalent of `bin/uc auth login` that works without requiring
        the user to already be in the Unity Catalog database.
      x-uc-stage: public_preview
      x-uc-since: 0.3.0
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureLoginStartRequest'
      responses:
        '200':
          description: Azure login flow initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AzureLoginStartResponse'
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Azure AD configuration not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/azure-login/callback:
    get:
      tags:
        - OAuth2
      operationId: completeAzureLogin
      summary: Complete Azure AD OAuth2 login flow
      description: |
        **BOOTSTRAP FEATURE**: Complete Azure AD OAuth2 login flow by exchanging authorization code
        for Unity Catalog access token. Creates user if they don't exist (during bootstrap window).
        This endpoint handles the OAuth2 callback and returns a Unity Catalog token.
      x-uc-stage: public_preview
      x-uc-since: 0.3.0
      parameters:
        - name: code
          in: query
          required: true
          description: Authorization code from Azure AD
          schema:
            type: string
        - name: state
          in: query
          required: true
          description: State parameter containing CSRF protection and session information
          schema:
            type: string
      responses:
        '200':
          description: Azure login completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenExchangeInfo'
        '400':
          description: Bad request - invalid authorization code or session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - bootstrap required but not enabled/available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error during login completion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tokens:
    post:
      tags:
        - Developer Tokens
      operationId: createDeveloperToken
      summary: Create a new developer token (Personal Access Token)
      description: |
        Creates a new developer token (Personal Access Token) for API access.
        The token value is returned once and cannot be retrieved again.
        Tokens have a maximum lifetime of 60 days and include a scope for authorization.
      x-uc-stage: public_preview
      x-uc-since: 0.3.0
      security:
        - azureJwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeveloperTokenRequest'
      responses:
        '201':
          description: Developer token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeveloperTokenResponse'
        '400':
          description: Bad request - invalid parameters or TTL too long
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Developer Tokens
      operationId: listDeveloperTokens
      summary: List developer tokens for authenticated user
      description: |
        Lists all developer tokens for the authenticated user.
        Token values are never returned, only metadata.
      x-uc-stage: public_preview
      x-uc-since: 0.3.0
      security:
        - azureJwt: []
      responses:
        '200':
          description: List of developer tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeveloperTokensResponse'
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tokens/{tokenId}:
    delete:
      tags:
        - Developer Tokens
      operationId: revokeDeveloperToken
      summary: Revoke a developer token
      description: |
        Revokes (deletes) a developer token. Once revoked, the token becomes invalid
        and cannot be used for API access.
      x-uc-stage: public_preview
      x-uc-since: 0.3.0
      security:
        - azureJwt: []
      parameters:
        - name: tokenId
          in: path
          required: true
          description: Unique identifier of the token to revoke
          schema:
            type: string
      responses:
        '204':
          description: Token revoked successfully
        '401':
          description: Unauthorized - invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Token not found or not owned by authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    azureJwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Azure AD JWT token with required claims (oid, preferred_username, name)
  schemas:
    BootstrapOwnerRequest:
      type: object
      required:
        - metastore_id
      properties:
        metastore_id:
          type: string
          description: The metastore ID to grant OWNER privileges on
          example: "main"
    BootstrapOwnerResponse:
      type: object
      required:
        - user_id
        - principal_email
        - metastore_id
        - pat_token
      properties:
        user_id:
          type: string
          description: The created user ID
          example: "00000000-0000-0000-0000-000000000001"
        principal_email:
          type: string
          description: The Azure principal email
          example: "admin@company.com"
        metastore_id:
          type: string
          description: The metastore where OWNER was granted
          example: "main"
        pat_token:
          type: string
          description: Personal access token for the new OWNER (display once only)
          example: "pat_xxx...xxx"
        message:
          type: string
          description: Success message
          example: "OWNER bootstrap completed successfully"

    AzureLoginStartRequest:
      type: object
      properties:
        redirect_uri:
          type: string
          description: Optional custom redirect URI for OAuth2 callback
          example: "http://localhost:3000/auth/callback"
        scope:
          type: string
          description: OAuth2 scope to request
          default: "openid profile email"
          example: "openid profile email"

    AzureLoginStartResponse:
      type: object
      required:
        - authorization_url
        - session_id
        - expires_in
      properties:
        authorization_url:
          type: string
          description: Azure AD authorization URL to redirect user to
          example: "https://login.microsoftonline.com/tenant/oauth2/v2.0/authorize?..."
        session_id:
          type: string
          description: Session ID to use when completing the login flow
          example: "sess_1234567890abcdef"
        expires_in:
          type: integer
          description: Session expiration time in seconds
          example: 300
        state:
          type: string
          description: OAuth2 state parameter for CSRF protection
          example: "abcd1234"

    AzureLoginCallbackRequest:
      type: object
      required:
        - session_id
        - authorization_code
      properties:
        session_id:
          type: string
          description: Session ID from the start login response
          example: "sess_1234567890abcdef"
        authorization_code:
          type: string
          description: Authorization code from Azure AD callback
          example: "M.C1234-abcd..."
        state:
          type: string
          description: OAuth2 state parameter for verification
          example: "abcd1234"
    ErrorResponse:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          description: Machine-readable error code
          example: "OWNER_ALREADY_EXISTS"
        message:
          type: string
          description: Human-readable error message
          example: "An OWNER already exists for this metastore"
        details:
          type: object
          description: Additional error context
          additionalProperties: true
    User:
      properties:
        id:
          description: The unique identifier of the user.
          type: string
        name:
          description: The name of the user.
          type: string
        email:
          description: The email address of the user.
          type: string
        external_id:
          description: The external identifier of the user.
          type: string
        state:
          description: The state of the account.
          type: string
          enum:
            - ENABLED
            - DISABLED
        picture_url:
          description: The URL of the user's profile picture.
          type: string
        created_at:
          description: The time the user was created.
          type: integer
          format: int64
        updated_at:
          description: The time the user was last updated.
          type: integer
          format: int64
      type: object
      required:
        - id
        - name
        - email
    UserResourceList:
      description: List of SCIM User resources.
      type: object
      properties:
        totalResults:
          description: The total number of results.
          type: integer
          format: int32
        itemsPerPage:
            description: The number of items per page.
            type: integer
            format: int32
        startIndex:
            description: The index of the first result.
            type: integer
            format: int32
        Resources:
            description: The list of User resources.
            type: array
            items:
                $ref: '#/components/schemas/UserResource'
        id:
            description: User list id metadata.
            type: string
        externalId:
            description: User list external id metadata.
            type: string
        meta:
          description: The metadata of the user.
          type: object
          properties:
            resourceType:
              type: string
            created:
              type: string
            lastModified:
              type: string
    UserResource:
      description: SCIM provides a resource type for "User" resources.
      type: object
      properties:
        id:
          description: The id of the user.
          type: string
        displayName:
          description: The name of the user.
          type: string
        externalId:
          description: The SCIM external id.
          type: string
        emails:
          description: E-mail addresses for the user.
          type: array
          items:
            $ref: '#/components/schemas/Email'
        active:
            description: The active status of the user.
            type: boolean
        meta:
          description: The metadata of the user.
          type: object
          properties:
            created:
              type: string
            lastModified:
              type: string
        photos:
          description: The photos of the user.
          type: array
          items:
            type: object
            properties:
              value:
                description: The url of the user's photo.
                type: string
    Email:
      description: SCIM email for a user.
      type: object
      properties:
        value:
          description: The email of the user.
          type: string
        primary:
          description: If the email is primary.
          type: boolean
    GrantType:
      description: |
        Grant type identifier, from RFC 8693 Section 2.
        See https://datatracker.ietf.org/doc/html/rfc8693#section-2
      type: string
      enum:
        - urn:ietf:params:oauth:grant-type:token-exchange
      # NOTE:
      # OpenAPI 3.0/2.0 do not have a way to define custom names for enum values,
      # but some tools (e.g., openapi-generator and openapi-typescript) provide
      # x-prefixed extensions for this purpose.
      x-enum-varnames:
        - TOKEN_EXCHANGE
    TokenType:
      description: |
        Token type identifier, from RFC 8693 Section 3.
        See https://datatracker.ietf.org/doc/html/rfc8693#section-3
      type: string
      enum:
        - urn:ietf:params:oauth:token-type:access_token
        - urn:ietf:params:oauth:token-type:refresh_token
        - urn:ietf:params:oauth:token-type:id_token
        - urn:ietf:params:oauth:token-type:saml1
        - urn:ietf:params:oauth:token-type:saml2
        - urn:ietf:params:oauth:token-type:jwt
      # NOTE:
      # OpenAPI 3.0/2.0 do not have a way to define custom names for enum values,
      # but some tools (e.g., openapi-generator and openapi-typescript) provide
      # x-prefixed extensions for this purpose.
      x-enum-varnames:
        - ACCESS_TOKEN
        - REFRESH_TOKEN
        - ID_TOKEN
        - SAML1
        - SAML2
        - JWT
    AccessTokenType:
      description: |
        Access token type identifier, from RFC 8693 Section 2.
        See https://datatracker.ietf.org/doc/html/rfc8693#section-2
      type: string
      enum:
        - Bearer
    ResponseType:
      description: |
        Authorization endpoint response type, from RFC 6749 Section 3.
        See https://datatracker.ietf.org/doc/html/rfc6749#section-3
      type: string
      enum:
        - code
        - token
    AuthorizationGrantType:
      description: |
        Authorization grant type, from RFC 6749 Section 4.
        See https://datatracker.ietf.org/doc/html/rfc6749#section-4
      type: string
      enum:
        - authorization_code
    TokenEndpointExtensionType:
      description: |
        The /auth/tokens endpoint supports an extension type.
        If ext=cookie is specified in the request query, the server will store a token in the user agent's cookie.
      type: string
      enum:
        - cookie
    OAuthTokenExchangeForm:
      description: |
        OAuth2 token exchange request form.
        See https://datatracker.ietf.org/doc/html/rfc8693
      type: object
      required:
        - grant_type
        - subject_token
        - subject_token_type
      properties:
        grant_type:
          $ref: "#/components/schemas/GrantType"
        scope:
          description: The authorization scope for the token exchange request.
          type: string
        requested_token_type:
          $ref: '#/components/schemas/TokenType'
        subject_token:
          description: The security token that represents the identity of the party on behalf of whom the request is being made.
          type: string
        subject_token_type:
          $ref: '#/components/schemas/TokenType'
        actor_token:
          description: The security token that represents the identity of the acting party.
          type: string
        actor_token_type:
          $ref: '#/components/schemas/TokenType'
    OAuthTokenExchangeInfo:
      description: |
        OAuth2 token exchange response.
        See https://datatracker.ietf.org/doc/html/rfc8693
      type: object
      required:
        - access_token
        - issued_token_type
        - token_type
      properties:
        access_token:
          description: The access token for the token exchange request.
          type: string
        issued_token_type:
          $ref: '#/components/schemas/TokenType'
        token_type:
          $ref: '#/components/schemas/AccessTokenType'
        expires_in:
          description: The lifetime of the access token in seconds for the token exchange.
          type: integer
          format: int64
        scope:
          description: The authorization scope for the token exchange.
          type: string
        refresh_token:
          description: The refresh token for the token exchange.
          type: string
    OAuthAuthorizationForm:
      description: |
        OAuth2 authorization request form.
        See https://datatracker.ietf.org/doc/html/rfc6749
      type: object
      required:
        - response_type
        - client_id
      properties:
        response_type:
          $ref: '#/components/schemas/ResponseType'
        client_id:
          description: The client identifier that represents the registration information provided by the client
          type: string
        redirect_uri:
          description: The URI that authorization server directs the resource owner's user-agent back to the client.
          type: string
        scope:
          description: The scope of the access request.
          type: string
        state:
          description: An opaque value used by the client to maintain state between the request and callback.
          type: string
    OAuthAuthorizationInfo:
      description: |
        OAuth2 authorization request.
        See https://datatracker.ietf.org/doc/html/rfc6749
      type: object
      required:
        - code
      properties:
        code:
          description: The authorization code generated by the authorization server.
          type: string
        state:
          description: An opaque value used by the client to maintain state between the request and callback.
          type: string
    OAuthAccessTokenForm:
      description: |
        OAuth2 access token request.
        See https://datatracker.ietf.org/doc/html/rfc6749
      type: object
      required:
        - grant_type
        - code
      properties:
        grant_type:
          $ref: "#/components/schemas/AuthorizationGrantType"
        code:
          description: The authorization code received from the authorization server.
          type: string
        redirect_uri:
          description: The URI that authorization server directs the resource owner's user-agent back to the client.
          type: string
        client_id:
          description: The client identifier that represents the registration information provided by the client
          type: string

    BootstrapStatus:
      type: object
      required:
        - bootstrapEnabled
        - hasAzureAdmin
      properties:
        bootstrapEnabled:
          type: boolean
          description: Whether bootstrap functionality is enabled
        hasAzureAdmin:
          type: boolean  
          description: Whether an Azure-authenticated admin already exists
        allowedDomains:
          type: array
          items:
            type: string
          description: Optional list of allowed email domains for admin claiming

    ClaimAdminResponse:
      type: object
      required:
        - userId
        - principalEmail
        - message
      properties:
        userId:
          type: string
          description: Unity Catalog user ID for claimed admin
        principalEmail:
          type: string
          description: Email address of claimed admin principal
        message:
          type: string
          description: Success message with next steps

    CreateDeveloperTokenRequest:
      type: object
      required:
        - comment
      properties:
        comment:
          type: string
          description: Human-readable description of the token purpose
          example: "API access for my automation scripts"
          maxLength: 255
        lifetimeSeconds:
          type: integer
          description: Token lifetime in seconds (maximum 5184000 = 60 days)
          minimum: 3600
          maximum: 5184000
          example: 86400
          default: 86400

    CreateDeveloperTokenResponse:
      type: object
      required:
        - tokenId
        - tokenValue
        - comment
        - creationTime
        - expiryTime
        - tokenStatus
      properties:
        tokenId:
          type: string
          description: Unique identifier for the token
          example: "550e8400-e29b-41d4-a716-446655440000"
        tokenValue:
          type: string
          description: The actual token value (shown only once)
          example: "dapi_123abc456def789..."
        comment:
          type: string
          description: Human-readable description of the token purpose
        creationTime:
          type: integer
          format: int64
          description: Token creation time (Unix timestamp in milliseconds)
        expiryTime:
          type: integer
          format: int64
          description: Token expiry time (Unix timestamp in milliseconds)
        tokenStatus:
          type: string
          enum: [ACTIVE, REVOKED]
          description: Current status of the token

    ListDeveloperTokensResponse:
      type: object
      required:
        - tokens
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/DeveloperTokenInfo'

    DeveloperTokenInfo:
      type: object
      required:
        - tokenId
        - comment
        - creationTime
        - expiryTime
        - tokenStatus
      properties:
        tokenId:
          type: string
          description: Unique identifier for the token
        comment:
          type: string
          description: Human-readable description of the token purpose
        creationTime:
          type: integer
          format: int64
          description: Token creation time (Unix timestamp in milliseconds)
        expiryTime:
          type: integer
          format: int64
          description: Token expiry time (Unix timestamp in milliseconds)
        tokenStatus:
          type: string
          enum: [ACTIVE, REVOKED]
          description: Current status of the token

info:
  title: Unity Control API
  version: '0.1'
